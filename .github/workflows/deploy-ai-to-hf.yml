name: Deploy AI to Hugging Face Hub

on:
  push:
    branches:
      - AI
    paths:
      - "AI/**"
      - ".github/workflows/deploy-ai-to-hf.yml"

jobs:
  deploy-to-hf-space:
    runs-on: ubuntu-latest
    steps:
      # 1. 우리 GitHub 저장소의 코드를 가져옵니다.
      # lfs: true 옵션을 추가하여 LFS로 관리되는 파일을 실제 파일로 다운로드합니다.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      # 2. Hugging Face에 접근할 수 있도록 Git 인증 정보를 설정합니다.
      - name: Configure Git for Hugging Face
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: git config --global url."https://Min9yu:${HF_TOKEN}@huggingface.co".insteadOf "https://huggingface.co"

      # 3. Hugging Face Space 저장소를 'hf-space'라는 이름의 폴더에 클론합니다.
      - name: Clone Hugging Face space
        run: git clone https://huggingface.co/spaces/Min9yu/localpiece-ai-generator hf-space

      # 4. 우리 저장소의 AI/ 폴더 내용을 hf-space 폴더로 동기화합니다.
      - name: Sync AI directory to HF space
        run: rsync -av --delete --exclude='.git/' AI/ hf-space/

      # 5. hf-space 폴더로 이동하여 Git LFS를 설정하고 대용량 파일을 추적합니다.
      - name: Set up Git LFS in target repository
        run: |
          cd hf-space
          git lfs install
          # AI 모델 가중치 파일들을 LFS로 추적하도록 설정합니다.
          git lfs track "*.pth.tar"
          git lfs track "*.pt"
          # LFS 설정을 담고 있는 .gitattributes 파일을 Git에 추가합니다.
          git add .gitattributes

      # 6. 변경사항을 Hugging Face 저장소에 push합니다.
      - name: Push to Hugging Face Hub
        run: |
          cd hf-space
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "🚀 Auto-deploy from main repo, setting up LFS"
            git push origin main
          else
            echo "No changes to deploy."
          fi