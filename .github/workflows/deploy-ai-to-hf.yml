name: Deploy AI to Hugging Face Hub

# 언제 이 워크플로우를 실행할지 정의합니다.
on:
  push:
    branches:
      - AI # main 브랜치에 push 될 때
    paths:
      - 'AI/**' # 그리고 변경된 파일이 'AI/' 폴더 안에 있을 때만 실행

jobs:
  deploy-to-hf-space:
    runs-on: ubuntu-latest
    steps:
      # 1. 우리 GitHub 저장소의 코드를 가져옵니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Hugging Face Space 저장소를 'hf-space'라는 이름의 폴더에 클론합니다.
      #    (인증 정보를 URL에 포함하여 Private 저장소 클론)
      - name: Clone Hugging Face space
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: git clone https://Min9yu:${HF_TOKEN}@huggingface.co/spaces/Min9yu/localpiece-ai-generator hf-space

      # 3. 우리 저장소의 AI/ 폴더 내용을 hf-space 폴더로 완벽하게 복사(동기화)합니다.
      - name: Sync AI directory to HF space
        run: rsync -av --delete --exclude='.git/' AI/ hf-space/

      # 4. hf-space 폴더로 이동하여 변경사항을 Hugging Face 저장소에 push합니다.
      - name: Push to Hugging Face Hub
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          cd hf-space
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add .
          # 변경사항이 있을 때만 커밋하고 푸시합니다.
          if ! git diff --staged --quiet; then
            git commit -m "🚀 Auto-deploy from main repo"
            # push 할 때도 인증 정보를 URL에 포함하는 것이 가장 확실합니다.
            git push https://Min9yu:${HF_TOKEN}@huggingface.co/spaces/Min9yu/localpiece-ai-generator main
          else
            echo "No changes to deploy."
          fi
