# .github/workflows/deploy.yml

name: Deploy to EC2

on:
  push:
    branches: 
      - "feature/INFRA"  # 현재 작업 브랜치
      - "BE"         

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 소스 코드 가져오기 (Checkout)
      - name: Checkout
        uses: actions/checkout@v4

      # 2. JDK 21 및 Gradle 설정, 빌드
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        working-directory: ./BE
        run: chmod +x ./gradlew
      - name: Build with Gradle
        working-directory: ./BE
        run: ./gradlew build --no-daemon -x test

      # 3. Docker Hub 로그인, 이미지 빌드 및 푸시
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        working-directory: ./BE
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/localpiece-app .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/localpiece-app

      # 4. EC2에 접속하여 배포 스크립트 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # 1. 프로젝트 폴더로 이동
            cd my-travel-project

            # 2. GitHub에서 최신 소스 코드(docker-compose.yml 등)를 받아옴
            git pull origin feature/deployment-setup

            # 3. .env 파일 생성 (민감 정보 주입)
            echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            
            # 4. Docker Hub에서 최신 앱 이미지를 받아옴
            docker-compose pull app

            # 5. Docker Compose로 서비스 재시작 (변경된 내용 적용)
            docker-compose up -d --remove-orphans
