version: "3.8"

services:
  # FastAPI AI 서비스
  ai_app:
    # build 컨텍스트를 AI 폴더로 지정합니다.
    build:
      context: ./AI
      dockerfile: Dockerfile
    image: localpiece-ai-app
    container_name: localpiece-ai-container
    # 서버에 직접 생성할 .env 파일을 읽어들입니다.
    env_file:
      - ./.env
    # 다중 워커 실행으로 병목 현상을 방지합니다.
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 2

  # Nginx 리버스 프록시
  nginx:
    image: nginx:latest
    container_name: localpiece-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # 아래에서 생성할 nginx.conf 파일을 마운트합니다.
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      # SSL 인증서를 위한 볼륨 마운트입니다.
      - /etc/letsencrypt:/etc/letsencrypt
    # ai_app이 실행된 후에 Nginx가 시작됩니다.
    depends_on:
      - ai_app
    restart: always
  # Spring Boot App 서비스
  app:
    build:
      context: ./BE
    image: localpiece-app
    # 컨테이너 이름 지정
    container_name: localpiece-app-container
    # .env 파일에 정의된 환경 변수를 컨테이너 내부로 전달
    env_file:
      - ./.env
    # ⬇️ db 서비스가 먼저 실행된 후에 app 서비스를 시작합니다.
    depends_on:
      - db

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health/liveness || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # 항상 재시작
    restart: always

    volumes:
        - /home/ubuntu/.oci/config-docker_osaka:/root/.oci/config:ro
        - /home/ubuntu/.oci/oci_api_key_osaka.pem:/root/.oci/oci_api_key.pem:ro
      
  # PostgreSQL 데이터베이스 서비스
  db:
    image: postgres:15-alpine 
    container_name: localpiece-db-container
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always

  # Nginx 서비스
  nginx:
    # 공식 Nginx 최신 이미지를 사용
    image: nginx:latest
    container_name: localpiece-nginx-container
    ports:
      # 외부의 80 포트를 Nginx 컨테이너의 80 포트로 연결
      - "80:80"
      - "443:443"
    volumes:
      # 현재 폴더의 nginx.conf 파일을 컨테이너 내부의 설정 파일 경로에 덮어쓰기
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt
    # app 서비스가 먼저 시작된 후에 nginx 서비스를 시작
    depends_on:
      app:
        condition: service_healthy
    restart: always

# ⬇️ 데이터베이스의 데이터를 서버 디스크에 저장(영속화)하기 위한 설정
volumes:
  postgres_data:
