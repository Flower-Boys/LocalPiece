# ==================================
#  공통 설정 (모든 환경에서 사용)
# ==================================
spring:
  # 기본으로 활성화할 프로파일을 'dev'로 설정
  profiles:
    active: dev
  # 애플리케이션 이름
  application:
    name: localpiece
  # JPA 및 하이버네이트 공통 설정
  jpa:
    open-in-view: false
    # SQL 쿼리를 보기 좋게 포맷팅
    properties:
      hibernate:
        format_sql: true
    # # DDL(테이블 생성/수정) 옵션. 'none'으로 설정하여 직접 관리하는 것을 권장
    # hibernate:
    #   ddl-auto: none
  # 서버 포트 설정
  server:
    port: 8080
  servlet:
    multipart:
      max-request-size: 100MB
      max-file-size: 10MB

# OCI Object Storage 설정
oci:
  object-storage:
    namespace: ${OCI_NAMESPACE}
    bucket-name: ${OCI_BUCKET_NAME}

tour-api:
  base-url: "https://apis.data.go.kr/B551011/KorService2"
  service-key: ${TOUR_API_SERVICE_KEY}

ai-server:
  url: ${AI_SERVER_URL}
  token: ${HF_TOKEN}




# --- 는 프로파일을 나누는 구분선입니다.

---
# ==================================
#  개발 환경 (dev profile)
#  - 내 컴퓨터에서 바로 실행할 때 사용
# ==================================
spring:
  config:
    activate:
      on-profile: dev
  # 로컬 PostgreSQL 데이터베이스 설정
  datasource:
    url: jdbc:postgresql://localhost:5432/localpiece-dev?sessionTimezone=Asia/Seoul
    username: localpiece
    password: localpiece
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      # ddl-auto: create-drop # ⬅️ 앱 실행 시 테이블 생성, 종료 시 삭제
      ddl-auto: update

    show-sql: true

oci:
  object-storage:
    config-path: "/Users/mingyu/.oci/config" # ⬅️ 내 컴퓨터의 OCI config 파일 경로

---
# ==================================
#  배포 환경 (prod profile)
#  - OCI 서버에 배포될 때 사용
# ==================================
spring:
  config:
    activate:
      on-profile: prod
  # PostgreSQL 데이터베이스 설정 (값은 .env 파일에서 주입)
  datasource:
    url: jdbc:postgresql://${DB_HOST}:5432/${DB_NAME}?sessionTimezone=Asia/Seoul
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update

oci:
  object-storage:
    config-path: "/root/.oci/config"

management:
  endpoint:
    health:
      probes:
        enabled: true # ⬇️ Liveness/Readiness 프로브 활성화
  health:
    livenessstate:
      enabled: true # ⬇️ Liveness 상태 엔드포인트 활성화 (/actuator/health/liveness)
    readinessstate:
      enabled: true # ⬇️ Readiness 상태 엔드포인트 활성화 (/actuator/health/readiness)
